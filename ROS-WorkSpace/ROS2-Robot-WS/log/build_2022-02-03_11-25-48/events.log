[0.000000] (-) TimerEvent: {}
[0.000310] (-) JobUnselected: {'identifier': 'robot'}
[0.000352] (-) JobUnselected: {'identifier': 'robot_sim'}
[0.000374] (-) JobUnselected: {'identifier': 'robot_sim_2'}
[0.000391] (-) JobUnselected: {'identifier': 'rplidar_ros2'}
[0.000437] (-) JobUnselected: {'identifier': 'serial_test'}
[0.000458] (-) JobUnselected: {'identifier': 'teleop_twist_keyboard'}
[0.000508] (astra_camera) JobQueued: {'identifier': 'astra_camera', 'dependencies': OrderedDict()}
[0.000533] (astra_camera) JobStarted: {'identifier': 'astra_camera'}
[0.024281] (astra_camera) JobProgress: {'identifier': 'astra_camera', 'progress': 'cmake'}
[0.025421] (astra_camera) JobProgress: {'identifier': 'astra_camera', 'progress': 'build'}
[0.026733] (astra_camera) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/build/astra_camera', '--', '-j4', '-l4'], 'cwd': '/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/build/astra_camera', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'fzq614'), ('SSH_AGENT_PID', '1679'), ('XDG_SESSION_TYPE', 'x11'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/opt/ros/galactic/opt/yaml_cpp_vendor/lib:/opt/ros/galactic/opt/rviz_ogre_vendor/lib:/opt/ros/galactic/lib/x86_64-linux-gnu:/opt/ros/galactic/lib'), ('HOME', '/home/fzq614'), ('DESKTOP_SESSION', 'ubuntu'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('MANAGERPID', '1503'), ('DBUS_STARTER_BUS_TYPE', 'session'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus,guid=37144bb9a3604b73d1f9e88d61fb3bc1'), ('COLORTERM', 'truecolor'), ('IM_CONFIG_PHASE', '1'), ('COLCON_PREFIX_PATH', '/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/install'), ('ROS_DISTRO', 'galactic'), ('LOGNAME', 'fzq614'), ('JOURNAL_STREAM', '8:58466'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'fzq614'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('WINDOWPATH', '2'), ('PATH', '/opt/ros/galactic/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'), ('SESSION_MANAGER', 'local/ubuntu:@/tmp/.ICE-unix/1714,unix/ubuntu:/tmp/.ICE-unix/1714'), ('INVOCATION_ID', '2e2d40c665994a9e91908fa242d8e65c'), ('XDG_MENU_PREFIX', 'gnome-'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/870e467a_0d53_4ded_967c_b0ddcf91cb6e'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/gdm/Xauthority'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('GNOME_TERMINAL_SERVICE', ':1.104'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('AMENT_PREFIX_PATH', '/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/install:/opt/ros/galactic'), ('SHELL', '/bin/bash'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('GPG_AGENT_INFO', '/run/user/1000/gnupg/S.gpg-agent:0:1'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/build/astra_camera'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('DBUS_STARTER_ADDRESS', 'unix:path=/run/user/1000/bus,guid=37144bb9a3604b73d1f9e88d61fb3bc1'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/build/teleop_twist_keyboard:/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/install/lib/python3.8/site-packages:/opt/ros/galactic/lib/python3.8/site-packages'), ('COLCON', '1'), ('VTE_VERSION', '6003'), ('CMAKE_PREFIX_PATH', '/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/install:/opt/ros/galactic')]), 'shell': False}
[0.098797] (-) TimerEvent: {}
[0.138001] (astra_camera) StdoutLine: {'line': b'\x1b[35m\x1b[1mScanning dependencies of target astra_driver_lib\x1b[0m\n'}
[0.138732] (astra_camera) StdoutLine: {'line': b'\x1b[35m\x1b[1mScanning dependencies of target astra_wrapper\x1b[0m\n'}
[0.172578] (astra_camera) StderrLine: {'line': b"make[2]: *** No rule to make target '/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device_type.cpp', needed by 'CMakeFiles/astra_driver_lib.dir/src/astra_device_type.cpp.o'.  Stop.\n"}
[0.172904] (astra_camera) StderrLine: {'line': b'make[2]: *** Waiting for unfinished jobs....\n'}
[0.183260] (astra_camera) StdoutLine: {'line': b'[  5%] \x1b[32mBuilding CXX object CMakeFiles/astra_driver_lib.dir/src/astra_driver.cpp.o\x1b[0m\n'}
[0.184676] (astra_camera) StdoutLine: {'line': b'[ 10%] \x1b[32mBuilding CXX object CMakeFiles/astra_wrapper.dir/src/astra_convert.cpp.o\x1b[0m\n'}
[0.189181] (astra_camera) StdoutLine: {'line': b'[ 15%] \x1b[32mBuilding CXX object CMakeFiles/astra_wrapper.dir/src/astra_timer_filter.cpp.o\x1b[0m\n'}
[0.189741] (astra_camera) StdoutLine: {'line': b'[ 21%] \x1b[32mBuilding CXX object CMakeFiles/astra_wrapper.dir/src/astra_device.cpp.o\x1b[0m\n'}
[0.199294] (-) TimerEvent: {}
[0.299911] (-) TimerEvent: {}
[0.400810] (-) TimerEvent: {}
[0.501490] (astra_camera) StdoutLine: {'line': b'[ 26%] \x1b[32mBuilding CXX object CMakeFiles/astra_wrapper.dir/src/astra_frame_listener.cpp.o\x1b[0m\n'}
[0.501760] (-) TimerEvent: {}
[0.602316] (-) TimerEvent: {}
[0.702832] (-) TimerEvent: {}
[0.803323] (-) TimerEvent: {}
[0.856458] (astra_camera) StderrLine: {'line': b"make[2]: *** No rule to make target '/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device_type.cpp', needed by 'CMakeFiles/astra_wrapper.dir/src/astra_device_type.cpp.o'.  Stop.\n"}
[0.856718] (astra_camera) StderrLine: {'line': b'make[2]: *** Waiting for unfinished jobs....\n'}
[0.870525] (astra_camera) StdoutLine: {'line': b'[ 31%] \x1b[32mBuilding CXX object CMakeFiles/astra_wrapper.dir/src/astra_device_manager.cpp.o\x1b[0m\n'}
[0.903868] (-) TimerEvent: {}
[1.004613] (-) TimerEvent: {}
[1.105323] (-) TimerEvent: {}
[1.206363] (-) TimerEvent: {}
[1.307310] (-) TimerEvent: {}
[1.329761] (astra_camera) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_frame_listener.h:36\x1b[m\x1b[K,\n'}
[1.330696] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_frame_listener.cpp:32\x1b[m\x1b[K:\n'}
[1.330785] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:68:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.330873] (astra_camera) StderrLine: {'line': b'   AstraDevice(const std::string& device_URI) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.330940] (astra_camera) StderrLine: {'line': b'                                              \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.331007] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:100:47:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.331082] (astra_camera) StderrLine: {'line': b'   void setImageRegistrationMode(bool enabled) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.331188] (astra_camera) StderrLine: {'line': b'                                               \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.331265] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:101:40:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.331341] (astra_camera) StderrLine: {'line': b'   void setDepthColorSync(bool enabled) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.331413] (astra_camera) StderrLine: {'line': b'                                        \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.331484] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:103:41:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.331558] (astra_camera) StderrLine: {'line': b'   const AstraVideoMode getIRVideoMode() \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.331649] (astra_camera) StderrLine: {'line': b'                                         \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.331831] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:104:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.331910] (astra_camera) StderrLine: {'line': b'   const AstraVideoMode getColorVideoMode() \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.331985] (astra_camera) StderrLine: {'line': b'                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.332055] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:105:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.332154] (astra_camera) StderrLine: {'line': b'   const AstraVideoMode getDepthVideoMode() \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.332234] (astra_camera) StderrLine: {'line': b'                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.332304] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:115:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.332374] (astra_camera) StderrLine: {'line': b'   void setIRVideoMode(const AstraVideoMode& video_mode) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.332448] (astra_camera) StderrLine: {'line': b'                                                         \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.332519] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:116:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.332595] (astra_camera) StderrLine: {'line': b'   void setColorVideoMode(const AstraVideoMode& video_mode) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.332691] (astra_camera) StderrLine: {'line': b'                                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.332766] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:117:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.332843] (astra_camera) StderrLine: {'line': b'   void setDepthVideoMode(const AstraVideoMode& video_mode) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.332914] (astra_camera) StderrLine: {'line': b'                                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.332982] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:127:37:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.333053] (astra_camera) StderrLine: {'line': b'   void setAutoExposure(bool enable) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.333141] (astra_camera) StderrLine: {'line': b'                                     \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.333223] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:128:41:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.333295] (astra_camera) StderrLine: {'line': b'   void setAutoWhiteBalance(bool enable) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.333366] (astra_camera) StderrLine: {'line': b'                                         \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.333523] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:138:67:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.333605] (astra_camera) StderrLine: {'line': b'   boost::shared_ptr<openni::VideoStream> getIRVideoStream() const \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.334755] (astra_camera) StderrLine: {'line': b'                                                                   \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.334862] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:139:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.334940] (astra_camera) StderrLine: {'line': b'   boost::shared_ptr<openni::VideoStream> getColorVideoStream() const \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.335015] (astra_camera) StderrLine: {'line': b'                                                                      \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.335088] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:140:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.335341] (astra_camera) StderrLine: {'line': b'   boost::shared_ptr<openni::VideoStream> getDepthVideoStream() const \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.335424] (astra_camera) StderrLine: {'line': b'                                                                      \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.407899] (-) TimerEvent: {}
[1.508838] (-) TimerEvent: {}
[1.579026] (astra_camera) StderrLine: {'line': b'make[2]: *** [CMakeFiles/astra_wrapper.dir/build.make:115: CMakeFiles/astra_wrapper.dir/src/astra_frame_listener.cpp.o] Error 1\n'}
[1.609309] (-) TimerEvent: {}
[1.709936] (-) TimerEvent: {}
[1.810823] (-) TimerEvent: {}
[1.911842] (-) TimerEvent: {}
[1.924945] (astra_camera) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_driver.h:56\x1b[m\x1b[K,\n'}
[1.925217] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:33\x1b[m\x1b[K:\n'}
[1.925356] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:68:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.925460] (astra_camera) StderrLine: {'line': b'   AstraDevice(const std::string& device_URI) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.925559] (astra_camera) StderrLine: {'line': b'                                              \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.925871] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:100:47:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.926007] (astra_camera) StderrLine: {'line': b'   void setImageRegistrationMode(bool enabled) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.926108] (astra_camera) StderrLine: {'line': b'                                               \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.926284] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:101:40:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.926395] (astra_camera) StderrLine: {'line': b'   void setDepthColorSync(bool enabled) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.926504] (astra_camera) StderrLine: {'line': b'                                        \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.926659] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:103:41:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.926777] (astra_camera) StderrLine: {'line': b'   const AstraVideoMode getIRVideoMode() \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.926887] (astra_camera) StderrLine: {'line': b'                                         \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.927018] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:104:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.927151] (astra_camera) StderrLine: {'line': b'   const AstraVideoMode getColorVideoMode() \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.927260] (astra_camera) StderrLine: {'line': b'                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.927396] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:105:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.927514] (astra_camera) StderrLine: {'line': b'   const AstraVideoMode getDepthVideoMode() \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.927633] (astra_camera) StderrLine: {'line': b'                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.927985] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:115:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.928110] (astra_camera) StderrLine: {'line': b'   void setIRVideoMode(const AstraVideoMode& video_mode) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.928247] (astra_camera) StderrLine: {'line': b'                                                         \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.928405] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:116:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.928512] (astra_camera) StderrLine: {'line': b'   void setColorVideoMode(const AstraVideoMode& video_mode) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.928609] (astra_camera) StderrLine: {'line': b'                                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.928774] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:117:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.928881] (astra_camera) StderrLine: {'line': b'   void setDepthVideoMode(const AstraVideoMode& video_mode) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.928978] (astra_camera) StderrLine: {'line': b'                                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.929163] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:127:37:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.929276] (astra_camera) StderrLine: {'line': b'   void setAutoExposure(bool enable) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.929381] (astra_camera) StderrLine: {'line': b'                                     \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.929517] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:128:41:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.929646] (astra_camera) StderrLine: {'line': b'   void setAutoWhiteBalance(bool enable) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.929761] (astra_camera) StderrLine: {'line': b'                                         \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.929929] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:138:67:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.930042] (astra_camera) StderrLine: {'line': b'   boost::shared_ptr<openni::VideoStream> getIRVideoStream() const \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.930169] (astra_camera) StderrLine: {'line': b'                                                                   \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.930330] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:139:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.930459] (astra_camera) StderrLine: {'line': b'   boost::shared_ptr<openni::VideoStream> getColorVideoStream() const \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.930568] (astra_camera) StderrLine: {'line': b'                                                                      \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.930762] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:140:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.930888] (astra_camera) StderrLine: {'line': b'   boost::shared_ptr<openni::VideoStream> getDepthVideoStream() const \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.931001] (astra_camera) StderrLine: {'line': b'                                                                      \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.931829] (astra_camera) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_driver.h:56\x1b[m\x1b[K,\n'}
[1.932016] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:38\x1b[m\x1b[K:\n'}
[1.932097] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:68:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.932418] (astra_camera) StderrLine: {'line': b'   AstraDevice(const std::string& device_URI) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.932496] (astra_camera) StderrLine: {'line': b'                                              \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.932565] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:100:47:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.932671] (astra_camera) StderrLine: {'line': b'   void setImageRegistrationMode(bool enabled) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.932743] (astra_camera) StderrLine: {'line': b'                                               \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.932961] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:101:40:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.933045] (astra_camera) StderrLine: {'line': b'   void setDepthColorSync(bool enabled) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.933136] (astra_camera) StderrLine: {'line': b'                                        \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.933227] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:103:41:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.933302] (astra_camera) StderrLine: {'line': b'   const AstraVideoMode getIRVideoMode() \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.933373] (astra_camera) StderrLine: {'line': b'                                         \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.933447] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:104:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.933531] (astra_camera) StderrLine: {'line': b'   const AstraVideoMode getColorVideoMode() \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.933608] (astra_camera) StderrLine: {'line': b'                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.933709] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:105:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.933783] (astra_camera) StderrLine: {'line': b'   const AstraVideoMode getDepthVideoMode() \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.933855] (astra_camera) StderrLine: {'line': b'                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.933928] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:115:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.934001] (astra_camera) StderrLine: {'line': b'   void setIRVideoMode(const AstraVideoMode& video_mode) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.934073] (astra_camera) StderrLine: {'line': b'                                                         \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.934178] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:116:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.934257] (astra_camera) StderrLine: {'line': b'   void setColorVideoMode(const AstraVideoMode& video_mode) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.934331] (astra_camera) StderrLine: {'line': b'                                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.934395] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:117:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.934465] (astra_camera) StderrLine: {'line': b'   void setDepthVideoMode(const AstraVideoMode& video_mode) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.934529] (astra_camera) StderrLine: {'line': b'                                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.934592] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:127:37:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.934683] (astra_camera) StderrLine: {'line': b'   void setAutoExposure(bool enable) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.934751] (astra_camera) StderrLine: {'line': b'                                     \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.934819] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:128:41:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.934885] (astra_camera) StderrLine: {'line': b'   void setAutoWhiteBalance(bool enable) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.934949] (astra_camera) StderrLine: {'line': b'                                         \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.935011] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:138:67:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.935081] (astra_camera) StderrLine: {'line': b'   boost::shared_ptr<openni::VideoStream> getIRVideoStream() const \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.935169] (astra_camera) StderrLine: {'line': b'                                                                   \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.935240] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:139:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.935306] (astra_camera) StderrLine: {'line': b'   boost::shared_ptr<openni::VideoStream> getColorVideoStream() const \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.935371] (astra_camera) StderrLine: {'line': b'                                                                      \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[1.935434] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:140:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[1.935498] (astra_camera) StderrLine: {'line': b'   boost::shared_ptr<openni::VideoStream> getDepthVideoStream() const \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[1.935561] (astra_camera) StderrLine: {'line': b'                                                                      \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.012317] (-) TimerEvent: {}
[2.074010] (astra_camera) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device_manager.cpp:35\x1b[m\x1b[K:\n'}
[2.074306] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:68:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[2.074389] (astra_camera) StderrLine: {'line': b'   AstraDevice(const std::string& device_URI) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[2.074463] (astra_camera) StderrLine: {'line': b'                                              \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.074534] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:100:47:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[2.074603] (astra_camera) StderrLine: {'line': b'   void setImageRegistrationMode(bool enabled) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[2.074695] (astra_camera) StderrLine: {'line': b'                                               \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.074763] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:101:40:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[2.074831] (astra_camera) StderrLine: {'line': b'   void setDepthColorSync(bool enabled) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[2.074897] (astra_camera) StderrLine: {'line': b'                                        \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.074963] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:103:41:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[2.075028] (astra_camera) StderrLine: {'line': b'   const AstraVideoMode getIRVideoMode() \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[2.075101] (astra_camera) StderrLine: {'line': b'                                         \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.075191] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:104:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[2.075264] (astra_camera) StderrLine: {'line': b'   const AstraVideoMode getColorVideoMode() \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[2.075336] (astra_camera) StderrLine: {'line': b'                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.075396] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:105:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[2.075456] (astra_camera) StderrLine: {'line': b'   const AstraVideoMode getDepthVideoMode() \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[2.075514] (astra_camera) StderrLine: {'line': b'                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.075577] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:115:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[2.075660] (astra_camera) StderrLine: {'line': b'   void setIRVideoMode(const AstraVideoMode& video_mode) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[2.075841] (astra_camera) StderrLine: {'line': b'                                                         \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.075904] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:116:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[2.075965] (astra_camera) StderrLine: {'line': b'   void setColorVideoMode(const AstraVideoMode& video_mode) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[2.076025] (astra_camera) StderrLine: {'line': b'                                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.076085] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:117:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[2.076168] (astra_camera) StderrLine: {'line': b'   void setDepthVideoMode(const AstraVideoMode& video_mode) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[2.076230] (astra_camera) StderrLine: {'line': b'                                                            \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.076290] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:127:37:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[2.076351] (astra_camera) StderrLine: {'line': b'   void setAutoExposure(bool enable) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[2.076409] (astra_camera) StderrLine: {'line': b'                                     \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.076478] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:128:41:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[2.076544] (astra_camera) StderrLine: {'line': b'   void setAutoWhiteBalance(bool enable) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[2.076607] (astra_camera) StderrLine: {'line': b'                                         \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.076695] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:138:67:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[2.076762] (astra_camera) StderrLine: {'line': b'   boost::shared_ptr<openni::VideoStream> getIRVideoStream() const \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[2.076826] (astra_camera) StderrLine: {'line': b'                                                                   \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.076890] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:139:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[2.076954] (astra_camera) StderrLine: {'line': b'   boost::shared_ptr<openni::VideoStream> getColorVideoStream() const \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[2.077017] (astra_camera) StderrLine: {'line': b'                                                                      \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.077081] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device.h:140:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[2.077172] (astra_camera) StderrLine: {'line': b'   boost::shared_ptr<openni::VideoStream> getDepthVideoStream() const \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException);\n'}
[2.077238] (astra_camera) StderrLine: {'line': b'                                                                      \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.112832] (-) TimerEvent: {}
[2.213335] (-) TimerEvent: {}
[2.290457] (astra_camera) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/8/map:60\x1b[m\x1b[K,\n'}
[2.290720] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/system/detail/std_interoperability.hpp:11\x1b[m\x1b[K,\n'}
[2.290801] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/system/error_code.hpp:959\x1b[m\x1b[K,\n'}
[2.290886] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/system/system_error.hpp:11\x1b[m\x1b[K,\n'}
[2.290956] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/thread/exceptions.hpp:22\x1b[m\x1b[K,\n'}
[2.291024] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/thread/pthread/mutex.hpp:14\x1b[m\x1b[K,\n'}
[2.291090] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/thread/mutex.hpp:16\x1b[m\x1b[K,\n'}
[2.291179] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_device_manager.h:38\x1b[m\x1b[K,\n'}
[2.291253] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device_manager.cpp:33\x1b[m\x1b[K:\n'}
[2.291318] (astra_camera) StderrLine: {'line': b'/usr/include/c++/8/bits/stl_tree.h: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstatic const _Key& std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_S_key(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type) [with _Key = astra_wrapper::AstraDeviceInfo; _Val = astra_wrapper::AstraDeviceInfo; _KeyOfValue = std::_Identity<astra_wrapper::AstraDeviceInfo>; _Compare = astra_wrapper::AstraDeviceInfoComparator; _Alloc = std::allocator<astra_wrapper::AstraDeviceInfo>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<astra_wrapper::AstraDeviceInfo>*]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.291393] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/8/bits/stl_tree.h:1963:37:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::pair<std::_Rb_tree_iterator<_Val>, std::_Rb_tree_iterator<_Val> > std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::equal_range(const _Key&) [with _Key = astra_wrapper::AstraDeviceInfo; _Val = astra_wrapper::AstraDeviceInfo; _KeyOfValue = std::_Identity<astra_wrapper::AstraDeviceInfo>; _Compare = astra_wrapper::AstraDeviceInfoComparator; _Alloc = std::allocator<astra_wrapper::AstraDeviceInfo>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.291460] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/8/bits/stl_tree.h:2523:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::erase(const _Key&) [with _Key = astra_wrapper::AstraDeviceInfo; _Val = astra_wrapper::AstraDeviceInfo; _KeyOfValue = std::_Identity<astra_wrapper::AstraDeviceInfo>; _Compare = astra_wrapper::AstraDeviceInfoComparator; _Alloc = std::allocator<astra_wrapper::AstraDeviceInfo>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.291527] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/8/bits/stl_set.h:685:30:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::set<_Key, _Compare, _Alloc>::size_type std::set<_Key, _Compare, _Alloc>::erase(const key_type&) [with _Key = astra_wrapper::AstraDeviceInfo; _Compare = astra_wrapper::AstraDeviceInfoComparator; _Alloc = std::allocator<astra_wrapper::AstraDeviceInfo>; std::set<_Key, _Compare, _Alloc>::size_type = long unsigned int; std::set<_Key, _Compare, _Alloc>::key_type = astra_wrapper::AstraDeviceInfo]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.291590] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device_manager.cpp:120:42:\x1b[m\x1b[K   required from here\n'}
[2.291766] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/8/bits/stl_tree.h:777:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kstatic assertion failed: comparison object must be invocable as const\n'}
[2.291852] (astra_camera) StderrLine: {'line': b'        \x1b[01;31m\x1b[Kis_invocable_v<const _Compare&, const _Key&, const _Key&>\x1b[m\x1b[K,\n'}
[2.291913] (astra_camera) StderrLine: {'line': b'        \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.313804] (-) TimerEvent: {}
[2.394333] (astra_camera) StderrLine: {'line': b'make[2]: *** [CMakeFiles/astra_wrapper.dir/build.make:128: CMakeFiles/astra_wrapper.dir/src/astra_device_manager.cpp.o] Error 1\n'}
[2.414298] (-) TimerEvent: {}
[2.514880] (-) TimerEvent: {}
[2.615823] (-) TimerEvent: {}
[2.717364] (-) TimerEvent: {}
[2.818302] (-) TimerEvent: {}
[2.918830] (-) TimerEvent: {}
[3.019821] (-) TimerEvent: {}
[3.057946] (astra_camera) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:33\x1b[m\x1b[K:\n'}
[3.058396] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_driver.h:92:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.058567] (astra_camera) StderrLine: {'line': b'   std::string resolveDeviceURI(const std::string& device_id) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K(AstraException);\n'}
[3.058761] (astra_camera) StderrLine: {'line': b'                                                              \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.082670] (astra_camera) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:38\x1b[m\x1b[K:\n'}
[3.082937] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_driver.h:92:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.083038] (astra_camera) StderrLine: {'line': b'   std::string resolveDeviceURI(const std::string& device_id) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K(AstraException);\n'}
[3.083164] (astra_camera) StderrLine: {'line': b'                                                              \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.112351] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:52:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.112623] (astra_camera) StderrLine: {'line': b' AstraDevice::AstraDevice(const std::string& device_URI) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException) :\n'}
[3.112705] (astra_camera) StderrLine: {'line': b'                                                         \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.119212] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:405:58:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.119551] (astra_camera) StderrLine: {'line': b' void AstraDevice::setImageRegistrationMode(bool enabled) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException)\n'}
[3.119706] (astra_camera) StderrLine: {'line': b'                                                          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.120086] (-) TimerEvent: {}
[3.120373] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:425:51:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.120624] (astra_camera) StderrLine: {'line': b' void AstraDevice::setDepthColorSync(bool enabled) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException)\n'}
[3.120818] (astra_camera) StderrLine: {'line': b'                                                   \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.120919] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:432:52:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.121138] (astra_camera) StderrLine: {'line': b' const AstraVideoMode AstraDevice::getIRVideoMode() \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException)\n'}
[3.121285] (astra_camera) StderrLine: {'line': b'                                                    \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.121358] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:450:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.121568] (astra_camera) StderrLine: {'line': b' const AstraVideoMode AstraDevice::getColorVideoMode() \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException)\n'}
[3.121673] (astra_camera) StderrLine: {'line': b'                                                       \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.121824] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:468:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.121931] (astra_camera) StderrLine: {'line': b' const AstraVideoMode AstraDevice::getDepthVideoMode() \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException)\n'}
[3.122161] (astra_camera) StderrLine: {'line': b'                                                       \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.122234] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:486:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.122375] (astra_camera) StderrLine: {'line': b' void AstraDevice::setIRVideoMode(const AstraVideoMode& video_mode) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException)\n'}
[3.122486] (astra_camera) StderrLine: {'line': b'                                                                    \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.122762] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:499:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.122927] (astra_camera) StderrLine: {'line': b' void AstraDevice::setColorVideoMode(const AstraVideoMode& video_mode) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException)\n'}
[3.123078] (astra_camera) StderrLine: {'line': b'                                                                       \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.123229] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:512:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.123389] (astra_camera) StderrLine: {'line': b' void AstraDevice::setDepthVideoMode(const AstraVideoMode& video_mode) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException)\n'}
[3.123548] (astra_camera) StderrLine: {'line': b'                                                                       \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.123740] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:525:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.123825] (astra_camera) StderrLine: {'line': b' void AstraDevice::setAutoExposure(bool enable) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException)\n'}
[3.123895] (astra_camera) StderrLine: {'line': b'                                                \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.123964] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:541:52:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.124031] (astra_camera) StderrLine: {'line': b' void AstraDevice::setAutoWhiteBalance(bool enable) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException)\n'}
[3.124100] (astra_camera) StderrLine: {'line': b'                                                    \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.124312] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:616:78:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.124397] (astra_camera) StderrLine: {'line': b' boost::shared_ptr<openni::VideoStream> AstraDevice::getIRVideoStream() const \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException)\n'}
[3.124473] (astra_camera) StderrLine: {'line': b'                                                                              \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.124546] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:632:81:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.124656] (astra_camera) StderrLine: {'line': b' boost::shared_ptr<openni::VideoStream> AstraDevice::getColorVideoStream() const \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException)\n'}
[3.124734] (astra_camera) StderrLine: {'line': b'                                                                                 \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.124813] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_device.cpp:648:81:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.124886] (astra_camera) StderrLine: {'line': b' boost::shared_ptr<openni::VideoStream> AstraDevice::getDepthVideoStream() const \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K (AstraException)\n'}
[3.124957] (astra_camera) StderrLine: {'line': b'                                                                                 \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.220377] (-) TimerEvent: {}
[3.321445] (-) TimerEvent: {}
[3.356122] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid astra_wrapper::AstraDriver::advertiseROSTopics()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.357022] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:190:101:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Node::create_publisher<sensor_msgs::msg::Image>(const char [6], const rmw_qos_profile_t&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.357166] (astra_camera) StderrLine: {'line': b'     pub_color_ = nh_->create_publisher<sensor_msgs::msg::Image>("image", rmw_qos_profile_sensor_data\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[3.357271] (astra_camera) StderrLine: {'line': b'                                                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[3.357414] (astra_camera) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[3.357676] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[3.357881] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[3.358060] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_driver.h:62\x1b[m\x1b[K,\n'}
[3.358220] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:33\x1b[m\x1b[K:\n'}
[3.358365] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:200:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.358512] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[3.358928] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.359021] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:200:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.359131] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:190:74:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  cannot convert \xe2\x80\x98\x1b[01m\x1b[Krmw_qos_profile_sensor_data\x1b[m\x1b[K\xe2\x80\x99 (type \xe2\x80\x98\x1b[01m\x1b[Kconst rmw_qos_profile_t\x1b[m\x1b[K\xe2\x80\x99) to type \xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::QoS&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.359229] (astra_camera) StderrLine: {'line': b'     pub_color_ = nh_->create_publisher<sensor_msgs::msg::Image>("image", \x1b[01;36m\x1b[Krmw_qos_profile_sensor_data\x1b[m\x1b[K);\n'}
[3.359304] (astra_camera) StderrLine: {'line': b'                                                                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.359376] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:199:101:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Node::create_publisher<sensor_msgs::msg::Image>(const char [9], const rmw_qos_profile_t&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.359456] (astra_camera) StderrLine: {'line': b'     pub_ir_ = nh_->create_publisher<sensor_msgs::msg::Image>("ir_image", rmw_qos_profile_sensor_data\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[3.359527] (astra_camera) StderrLine: {'line': b'                                                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[3.359612] (astra_camera) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[3.359699] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[3.359772] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[3.359853] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_driver.h:62\x1b[m\x1b[K,\n'}
[3.359931] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:33\x1b[m\x1b[K:\n'}
[3.360005] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:200:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.360080] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[3.360289] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.360378] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:200:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.360453] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:199:74:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  cannot convert \xe2\x80\x98\x1b[01m\x1b[Krmw_qos_profile_sensor_data\x1b[m\x1b[K\xe2\x80\x99 (type \xe2\x80\x98\x1b[01m\x1b[Kconst rmw_qos_profile_t\x1b[m\x1b[K\xe2\x80\x99) to type \xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::QoS&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.360526] (astra_camera) StderrLine: {'line': b'     pub_ir_ = nh_->create_publisher<sensor_msgs::msg::Image>("ir_image", \x1b[01;36m\x1b[Krmw_qos_profile_sensor_data\x1b[m\x1b[K);\n'}
[3.360617] (astra_camera) StderrLine: {'line': b'                                                                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.360698] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:210:105:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Node::create_publisher<sensor_msgs::msg::Image>(const char [6], const rmw_qos_profile_t&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.360771] (astra_camera) StderrLine: {'line': b'     pub_depth_raw_ = nh_->create_publisher<sensor_msgs::msg::Image>("depth", rmw_qos_profile_sensor_data\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[3.360841] (astra_camera) StderrLine: {'line': b'                                                                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[3.360908] (astra_camera) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[3.360975] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[3.361043] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[3.361127] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_driver.h:62\x1b[m\x1b[K,\n'}
[3.361206] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:33\x1b[m\x1b[K:\n'}
[3.361276] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:200:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.361350] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[3.361425] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.361493] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:200:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.361562] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:210:78:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  cannot convert \xe2\x80\x98\x1b[01m\x1b[Krmw_qos_profile_sensor_data\x1b[m\x1b[K\xe2\x80\x99 (type \xe2\x80\x98\x1b[01m\x1b[Kconst rmw_qos_profile_t\x1b[m\x1b[K\xe2\x80\x99) to type \xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::QoS&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.361668] (astra_camera) StderrLine: {'line': b'     pub_depth_raw_ = nh_->create_publisher<sensor_msgs::msg::Image>("depth", \x1b[01;36m\x1b[Krmw_qos_profile_sensor_data\x1b[m\x1b[K);\n'}
[3.361741] (astra_camera) StderrLine: {'line': b'                                                                              \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.361819] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:211:130:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Node::create_publisher<sensor_msgs::msg::CameraInfo>(const char [18], const rmw_qos_profile_t&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.361888] (astra_camera) StderrLine: {'line': b' pth_camera_info_ = nh_->create_publisher<sensor_msgs::msg::CameraInfo>("depth_camera_info", rmw_qos_profile_sensor_data\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[3.361953] (astra_camera) StderrLine: {'line': b'                                                                                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[3.362015] (astra_camera) StderrLine: {'line': b'\n'}
[3.362073] (astra_camera) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[3.362158] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[3.362222] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[3.362283] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_driver.h:62\x1b[m\x1b[K,\n'}
[3.362343] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:33\x1b[m\x1b[K:\n'}
[3.362403] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:200:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.362467] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[3.362529] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.362590] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:200:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.362674] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:211:103:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  cannot convert \xe2\x80\x98\x1b[01m\x1b[Krmw_qos_profile_sensor_data\x1b[m\x1b[K\xe2\x80\x99 (type \xe2\x80\x98\x1b[01m\x1b[Kconst rmw_qos_profile_t\x1b[m\x1b[K\xe2\x80\x99) to type \xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::QoS&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.362740] (astra_camera) StderrLine: {'line': b'     pub_depth_camera_info_ = nh_->create_publisher<sensor_msgs::msg::CameraInfo>("depth_camera_info", \x1b[01;36m\x1b[Krmw_qos_profile_sensor_data\x1b[m\x1b[K);\n'}
[3.362802] (astra_camera) StderrLine: {'line': b'                                                                                                       \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.377297] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid astra_wrapper::AstraDriver::newIRFrameCallback(sensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.377734] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:542:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Publisher<sensor_msgs::msg::Image_<std::allocator<void> > >::publish(sensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.377820] (astra_camera) StderrLine: {'line': b'       pub_ir_->publish(image\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[3.377894] (astra_camera) StderrLine: {'line': b'                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[3.377984] (astra_camera) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/topic_statistics/subscription_topic_statistics.hpp:31\x1b[m\x1b[K,\n'}
[3.378057] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription.hpp:50\x1b[m\x1b[K,\n'}
[3.378299] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:25\x1b[m\x1b[K,\n'}
[3.378717] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[3.378798] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[3.378871] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[3.378937] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor.hpp:36\x1b[m\x1b[K,\n'}
[3.379004] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[3.379073] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[3.379169] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[3.379251] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_driver.h:62\x1b[m\x1b[K,\n'}
[3.379325] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:33\x1b[m\x1b[K:\n'}
[3.379394] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:187:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(std::unique_ptr<MessageT, typename std::conditional<std::is_same<typename std::allocator_traits<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type>::rebind_alloc<MessageT>, typename std::allocator<void>::rebind<_Tp1>::other>::value, std::default_delete<_Tp>, rclcpp::allocator::AllocatorDeleter<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type> >::type>) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>; typename std::conditional<std::is_same<typename std::allocator_traits<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type>::rebind_alloc<MessageT>, typename std::allocator<void>::rebind<_Tp1>::other>::value, std::default_delete<_Tp>, rclcpp::allocator::AllocatorDeleter<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type> >::type = std::default_delete<sensor_msgs::msg::Image_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.379478] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(std::unique_ptr<MessageT, MessageDeleter> msg)\n'}
[3.379545] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.380395] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:187:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::Image_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<sensor_msgs::msg::Image_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Image_<std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.380506] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:211:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const MessageT&) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.380580] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const MessageT & msg)\n'}
[3.380687] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.380758] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:211:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::Image_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst sensor_msgs::msg::Image_<std::allocator<void> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.380831] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:228:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const rcl_serialized_message_t&) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>; rcl_serialized_message_t = rcutils_uint8_array_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.380901] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const rcl_serialized_message_t & serialized_msg)\n'}
[3.380969] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.381037] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:228:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::Image_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst rcl_serialized_message_t&\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kconst rcutils_uint8_array_t&\x1b[m\x1b[K\xe2\x80\x99}\n'}
[3.381142] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:234:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const rclcpp::SerializedMessage&) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.381220] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const SerializedMessage & serialized_msg)\n'}
[3.381294] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.381363] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:234:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::Image_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::SerializedMessage&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.381512] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:248:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(rclcpp::LoanedMessage<MessageT, AllocatorT>&&) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.381663] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(rclcpp::LoanedMessage<MessageT, AllocatorT> && loaned_msg)\n'}
[3.382256] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.382356] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:248:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::Image_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::LoanedMessage<sensor_msgs::msg::Image_<std::allocator<void> >, std::allocator<void> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.382441] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid astra_wrapper::AstraDriver::newColorFrameCallback(sensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.382519] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:559:32:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Publisher<sensor_msgs::msg::Image_<std::allocator<void> > >::publish(sensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.382634] (astra_camera) StderrLine: {'line': b'       pub_color_->publish(image\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[3.382720] (astra_camera) StderrLine: {'line': b'                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[3.382794] (astra_camera) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/topic_statistics/subscription_topic_statistics.hpp:31\x1b[m\x1b[K,\n'}
[3.382868] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription.hpp:50\x1b[m\x1b[K,\n'}
[3.382941] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:25\x1b[m\x1b[K,\n'}
[3.383010] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[3.383108] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[3.383206] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[3.383278] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor.hpp:36\x1b[m\x1b[K,\n'}
[3.383348] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[3.383418] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[3.383483] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[3.383550] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_driver.h:62\x1b[m\x1b[K,\n'}
[3.383655] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:33\x1b[m\x1b[K:\n'}
[3.383727] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:187:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(std::unique_ptr<MessageT, typename std::conditional<std::is_same<typename std::allocator_traits<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type>::rebind_alloc<MessageT>, typename std::allocator<void>::rebind<_Tp1>::other>::value, std::default_delete<_Tp>, rclcpp::allocator::AllocatorDeleter<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type> >::type>) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>; typename std::conditional<std::is_same<typename std::allocator_traits<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type>::rebind_alloc<MessageT>, typename std::allocator<void>::rebind<_Tp1>::other>::value, std::default_delete<_Tp>, rclcpp::allocator::AllocatorDeleter<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type> >::type = std::default_delete<sensor_msgs::msg::Image_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.383828] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(std::unique_ptr<MessageT, MessageDeleter> msg)\n'}
[3.383896] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.383960] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:187:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::Image_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<sensor_msgs::msg::Image_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Image_<std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.384027] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:211:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const MessageT&) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.384121] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const MessageT & msg)\n'}
[3.384310] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.384378] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:211:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::Image_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst sensor_msgs::msg::Image_<std::allocator<void> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.384448] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:228:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const rcl_serialized_message_t&) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>; rcl_serialized_message_t = rcutils_uint8_array_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.384520] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const rcl_serialized_message_t & serialized_msg)\n'}
[3.384613] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.384706] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:228:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::Image_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst rcl_serialized_message_t&\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kconst rcutils_uint8_array_t&\x1b[m\x1b[K\xe2\x80\x99}\n'}
[3.384788] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:234:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const rclcpp::SerializedMessage&) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.384860] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const SerializedMessage & serialized_msg)\n'}
[3.384931] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.384998] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:234:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::Image_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::SerializedMessage&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.385068] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:248:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(rclcpp::LoanedMessage<MessageT, AllocatorT>&&) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.385197] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(rclcpp::LoanedMessage<MessageT, AllocatorT> && loaned_msg)\n'}
[3.385270] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.385341] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:248:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::Image_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::LoanedMessage<sensor_msgs::msg::Image_<std::allocator<void> >, std::allocator<void> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.385423] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid astra_wrapper::AstraDriver::newDepthFrameCallback(sensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.385498] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:623:53:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Publisher<sensor_msgs::msg::Image_<std::allocator<void> > >::publish(sensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.385570] (astra_camera) StderrLine: {'line': b'         pub_depth_raw_->publish(floating_point_image\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[3.385670] (astra_camera) StderrLine: {'line': b'                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[3.385741] (astra_camera) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/topic_statistics/subscription_topic_statistics.hpp:31\x1b[m\x1b[K,\n'}
[3.385816] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription.hpp:50\x1b[m\x1b[K,\n'}
[3.385885] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:25\x1b[m\x1b[K,\n'}
[3.385953] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[3.386017] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[3.386095] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[3.386172] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor.hpp:36\x1b[m\x1b[K,\n'}
[3.386236] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[3.386301] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[3.386363] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[3.386424] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_driver.h:62\x1b[m\x1b[K,\n'}
[3.386488] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:33\x1b[m\x1b[K:\n'}
[3.386551] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:187:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(std::unique_ptr<MessageT, typename std::conditional<std::is_same<typename std::allocator_traits<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type>::rebind_alloc<MessageT>, typename std::allocator<void>::rebind<_Tp1>::other>::value, std::default_delete<_Tp>, rclcpp::allocator::AllocatorDeleter<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type> >::type>) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>; typename std::conditional<std::is_same<typename std::allocator_traits<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type>::rebind_alloc<MessageT>, typename std::allocator<void>::rebind<_Tp1>::other>::value, std::default_delete<_Tp>, rclcpp::allocator::AllocatorDeleter<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type> >::type = std::default_delete<sensor_msgs::msg::Image_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.386654] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(std::unique_ptr<MessageT, MessageDeleter> msg)\n'}
[3.386722] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.386786] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:187:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::Image_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<sensor_msgs::msg::Image_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Image_<std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.386864] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:211:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const MessageT&) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.386925] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const MessageT & msg)\n'}
[3.386983] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.387045] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:211:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::Image_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst sensor_msgs::msg::Image_<std::allocator<void> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.387161] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:228:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const rcl_serialized_message_t&) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>; rcl_serialized_message_t = rcutils_uint8_array_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.387237] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const rcl_serialized_message_t & serialized_msg)\n'}
[3.387296] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.387354] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:228:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::Image_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst rcl_serialized_message_t&\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kconst rcutils_uint8_array_t&\x1b[m\x1b[K\xe2\x80\x99}\n'}
[3.387416] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:234:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const rclcpp::SerializedMessage&) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.387476] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const SerializedMessage & serialized_msg)\n'}
[3.387534] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.387619] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:234:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::Image_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::SerializedMessage&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.387706] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:248:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(rclcpp::LoanedMessage<MessageT, AllocatorT>&&) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.387767] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(rclcpp::LoanedMessage<MessageT, AllocatorT> && loaned_msg)\n'}
[3.387960] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.388023] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:248:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::Image_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::Image_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::LoanedMessage<sensor_msgs::msg::Image_<std::allocator<void> >, std::allocator<void> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.419230] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:624:109:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Publisher<sensor_msgs::msg::CameraInfo_<std::allocator<void> > >::publish(sensor_msgs::msg::CameraInfo_<std::allocator<void> >::SharedPtr)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.419519] (astra_camera) StderrLine: {'line': b'         pub_depth_camera_info_->publish(getDepthCameraInfo(image->width, image->height, image->header.stamp)\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[3.419796] (astra_camera) StderrLine: {'line': b'                                                                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[3.419902] (astra_camera) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/topic_statistics/subscription_topic_statistics.hpp:31\x1b[m\x1b[K,\n'}
[3.419975] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription.hpp:50\x1b[m\x1b[K,\n'}
[3.420046] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:25\x1b[m\x1b[K,\n'}
[3.420267] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[3.420347] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[3.420411] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[3.420475] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor.hpp:36\x1b[m\x1b[K,\n'}
[3.420545] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[3.420639] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[3.420710] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[3.420774] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/include/astra_camera/astra_driver.h:62\x1b[m\x1b[K,\n'}
[3.420839] (astra_camera) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:33\x1b[m\x1b[K:\n'}
[3.420903] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:187:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(std::unique_ptr<MessageT, typename std::conditional<std::is_same<typename std::allocator_traits<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type>::rebind_alloc<MessageT>, typename std::allocator<void>::rebind<_Tp1>::other>::value, std::default_delete<_Tp>, rclcpp::allocator::AllocatorDeleter<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type> >::type>) [with MessageT = sensor_msgs::msg::CameraInfo_<std::allocator<void> >; AllocatorT = std::allocator<void>; typename std::conditional<std::is_same<typename std::allocator_traits<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type>::rebind_alloc<MessageT>, typename std::allocator<void>::rebind<_Tp1>::other>::value, std::default_delete<_Tp>, rclcpp::allocator::AllocatorDeleter<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type> >::type = std::default_delete<sensor_msgs::msg::CameraInfo_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.420989] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(std::unique_ptr<MessageT, MessageDeleter> msg)\n'}
[3.421053] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.421168] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:187:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::CameraInfo_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::CameraInfo_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<sensor_msgs::msg::CameraInfo_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::CameraInfo_<std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.421237] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:211:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const MessageT&) [with MessageT = sensor_msgs::msg::CameraInfo_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.421302] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const MessageT & msg)\n'}
[3.421364] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.421422] (-) TimerEvent: {}
[3.421565] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:211:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::CameraInfo_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::CameraInfo_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst sensor_msgs::msg::CameraInfo_<std::allocator<void> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.421669] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:228:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const rcl_serialized_message_t&) [with MessageT = sensor_msgs::msg::CameraInfo_<std::allocator<void> >; AllocatorT = std::allocator<void>; rcl_serialized_message_t = rcutils_uint8_array_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.421744] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const rcl_serialized_message_t & serialized_msg)\n'}
[3.421807] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.421868] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:228:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::CameraInfo_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::CameraInfo_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst rcl_serialized_message_t&\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kconst rcutils_uint8_array_t&\x1b[m\x1b[K\xe2\x80\x99}\n'}
[3.421936] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:234:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const rclcpp::SerializedMessage&) [with MessageT = sensor_msgs::msg::CameraInfo_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.422004] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const SerializedMessage & serialized_msg)\n'}
[3.422064] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.422153] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:234:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::CameraInfo_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::CameraInfo_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::SerializedMessage&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.422233] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:248:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(rclcpp::LoanedMessage<MessageT, AllocatorT>&&) [with MessageT = sensor_msgs::msg::CameraInfo_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.422302] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(rclcpp::LoanedMessage<MessageT, AllocatorT> && loaned_msg)\n'}
[3.422366] (astra_camera) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[3.422431] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/publisher.hpp:248:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::CameraInfo_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<sensor_msgs::msg::CameraInfo_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::LoanedMessage<sensor_msgs::msg::CameraInfo_<std::allocator<void> >, std::allocator<void> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.425233] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:\x1b[m\x1b[K At global scope:\n'}
[3.425405] (astra_camera) StderrLine: {'line': b'\x1b[01m\x1b[K/home/fzq614/My_ROS_Robot/ROS-WorkSpace/ROS2-Robot-WS/src/third_pkg/ros_astra_camera/src/astra_driver.cpp:810:73:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++17 does not allow dynamic exception specifications\n'}
[3.425491] (astra_camera) StderrLine: {'line': b' std::string AstraDriver::resolveDeviceURI(const std::string& device_id) \x1b[01;31m\x1b[Kthrow\x1b[m\x1b[K(AstraException)\n'}
[3.425572] (astra_camera) StderrLine: {'line': b'                                                                         \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[3.521869] (-) TimerEvent: {}
[3.622816] (-) TimerEvent: {}
[3.723795] (-) TimerEvent: {}
[3.746117] (astra_camera) StderrLine: {'line': b'make[2]: *** [CMakeFiles/astra_wrapper.dir/build.make:76: CMakeFiles/astra_wrapper.dir/src/astra_device.cpp.o] Error 1\n'}
[3.746562] (astra_camera) StderrLine: {'line': b'make[1]: *** [CMakeFiles/Makefile2:168: CMakeFiles/astra_wrapper.dir/all] Error 2\n'}
[3.746692] (astra_camera) StderrLine: {'line': b'make[1]: *** Waiting for unfinished jobs....\n'}
[3.824267] (-) TimerEvent: {}
[3.924860] (-) TimerEvent: {}
[4.025770] (-) TimerEvent: {}
[4.126391] (-) TimerEvent: {}
[4.227318] (-) TimerEvent: {}
[4.328280] (-) TimerEvent: {}
[4.428810] (-) TimerEvent: {}
[4.508066] (astra_camera) StderrLine: {'line': b'make[2]: *** [CMakeFiles/astra_driver_lib.dir/build.make:63: CMakeFiles/astra_driver_lib.dir/src/astra_driver.cpp.o] Error 1\n'}
[4.508393] (astra_camera) StderrLine: {'line': b'make[1]: *** [CMakeFiles/Makefile2:113: CMakeFiles/astra_driver_lib.dir/all] Error 2\n'}
[4.508567] (astra_camera) StderrLine: {'line': b'make: *** [Makefile:141: all] Error 2\n'}
[4.514843] (astra_camera) CommandEnded: {'returncode': 2}
[4.529437] (-) TimerEvent: {}
[4.630970] (-) TimerEvent: {}
[4.636618] (astra_camera) JobEnded: {'identifier': 'astra_camera', 'rc': 2}
[4.649249] (-) EventReactorShutdown: {}
